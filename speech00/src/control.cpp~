#include "std_msgs/Int16.h"
  #include "std_msgs/String.h"
  #include "geometry_msgs/Twist.h"
  #include "sound_play/sound_play.h"
 
  int inicio = 0;
  int rotate = 0;
  int turn = 0;
  int start = 0;
  int stop = 1;
  float linear_vel = 0.0;
  float angular_vel = 0.0;
  std_msgs::String comando_voz;  
 
  void sleepok(int t, ros::NodeHandle &n)
  {
       if (n.ok())
               sleep(t);
  }
 
  void speech(const std_msgs::String& voz)
  {
        ::comando_voz = voz;
       
        ros::NodeHandle n;     
       
        ros::Publisher object_pub_=n.advertise<std_msgs::Int16>("selected_object", 1);
       
        ros::Publisher move_base_pub_=n.advertise<geometry_msgs::Twist>("cmd_vel", 1);
       

       
        std_msgs::Int16 objeto;
        geometry_msgs::Twist mover_base;
             
        if (::comando_voz.data == "start speech")
        {
                inicio = 1;
                               
        }
        else if (::comando_voz.data == "stop speech")
        {
                inicio = 0;
                               
        }
        else if (inicio == 1)
        {
                if (::comando_voz.data == "stop")
                {
                        ::linear_vel = 0.0;
                        ::angular_vel = 0.0;
                       
                }
                else if (::comando_voz.data == "go forward")
                {
                       
                        ::linear_vel = 0.1;
                        ::angular_vel = 0.0;
                       
                }
                else if (::comando_voz.data == "go back")
                {
                       
                        ::linear_vel = -0.1;
                        ::angular_vel = 0.0;
                       
                }      
                else if (::comando_voz.data == "turn left")
                {
                        if (::angular_vel <= 0 || ::rotate == 1)
                        {
                                ::angular_vel = 0.1;
                               
                                ::rotate = 0;
                                ::turn = 1;                                    
                        }
                        else
                        {
                       
                                ::angular_vel = ::angular_vel + 0.1;

                        }
                }
                else if (::comando_voz.data == "turn right")
                {
                        if (::angular_vel >= 0 || ::rotate == 1)
                        {
                                ::angular_vel = -0.1;
                               
                                ::rotate = 0;
                                ::turn = 1;                            
                        }
                        else
                        {
               
                                 ::angular_vel = ::angular_vel - 0.1;

                        }
                }
                else if (::comando_voz.data == "rotate left")
                {
                        if (::angular_vel <= 0 || ::turn == 1)
                        {
                                ::angular_vel = 0.1;
                               
                                ::turn = 0;
                                ::rotate = 1;
                        }
                       
                        ::linear_vel = 0.0;
                       
                }
                else if (::comando_voz.data == "rotate right")
                {
                        if (::angular_vel >= 0 || ::turn == 1)
                        {
                                ::angular_vel = -0.1;
                               
                                ::turn = 0;
                                ::rotate = 1;                          
                        }
                       
                        ::linear_vel = 0.0;

                }              
                else if (::comando_voz.data == "speed up")                             
                {
                        if (::linear_vel == 0)
                        {
                                if (::angular_vel > 0 && ::rotate == 1)
                                {
                                        ::angular_vel= ::angular_vel + 0.05;
                                }
                                else if (::rotate == 1)
                                {
                                        ::angular_vel = ::angular_vel - 0.05;
                                }                      
                        }
                        else
                        {
                                if (::linear_vel > 0)
                                {
                                        ::linear_vel = ::linear_vel + 0.05;
                                }
                                else
                                {
                                        ::linear_vel = ::linear_vel - 0.05;
                                }
                        }
                }
                else if (::comando_voz.data == "slow down")                            
                {
                        if (::linear_vel == 0)
                        {
                                if (::angular_vel > 0 && ::rotate == 1)
                                {
                                        ::angular_vel = ::angular_vel - 0.05;
                                }
                                else if (::rotate == 1)
                                {
                                        ::angular_vel = ::angular_vel + 0.05;
                                }                                      
                        }
                        else
                        {
                                if (::linear_vel > 0)
                                {
                                        ::linear_vel = ::linear_vel - 0.05;
                                }
                                else
                                {
                                        ::linear_vel = ::linear_vel + 0.05;
                                }                      
                        }
                }
                else if (::comando_voz.data == "point beer")
                {
                        objeto.data = 1;
                       
                        object_pub_.publish(objeto);
                }
                else if (::comando_voz.data == "point cocacola")
                {
                        objeto.data = 2;
                       
                        object_pub_.publish(objeto);
                }
                else if (::comando_voz.data == "fold arm")
                {
                        objeto.data = 100;
                       
                        object_pub_.publish(objeto);
                }                                                                                                      
        }
  }
     
  int main(int argc, char **argv)
  {
         
        ros::init(argc, argv, "control_voz");  
 
        ros::NodeHandle n;
 
        ros::Subscriber speech_sub_= n.subscribe("/recognizer/output", 1, speech);
       
        ros::Publisher object_pub_=n.advertise<std_msgs::Int16>("selected_object", 1);
       
        ros::Publisher move_base_pub_=n.advertise<geometry_msgs::Twist>("cmd_vel", 1);
             
       
        ros::Rate loop_rate(10);
       
        geometry_msgs::Twist mover_base;
       
        sound_play::SoundClient voz_robot;
       
                sleepok(1, n);        
       
        while (ros::ok())
        {              
                        mover_base.linear.x = ::linear_vel;
                        mover_base.angular.z = ::angular_vel;
                       
                        move_base_pub_.publish(mover_base);
                       
                        if (::comando_voz.data == "start speech" && ::start == 0)
                        {
                                voz_robot.say("bep bep. I am listening you");
                               
                                sleepok(4, n);
                               
                                ::start = 1;
                                ::stop = 0;
                        }
                        else if (::comando_voz.data == "stop speech" && ::stop == 0)
                        {
                                voz_robot.say("bep bep. I stop listening");
                               
                                sleepok(4, n);
                               
                                ::stop = 1;
                                ::start = 0;
                        }                      
                       
                        ros::spinOnce();
       
                        loop_rate.sleep();                     
       
                }                    
       
        ros::spin();  
 
        return 0;
  }
