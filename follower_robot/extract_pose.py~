#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
import math
import tf
from tf.transformations import euler_from_quaternion
 
  
	


def startFollow():
	rospy.init_node('follow_bridge', anonymous=True)
	pub = rospy.Publisher('robot_velocity', Twist, queue_size=10)
	rate = rospy.Rate(10.0)
	listener = tf.TransformListener()
    	while not rospy.is_shutdown():
		try:
			(trans, rot) = listener.lookupTransform('openni_depth_frame','torso_1', rospy.Time(0)) 
			#rospy.loginfo("checking for torso")
		except (tf.LookupException, tf.ConnectivityException):
            		continue
		pose_x = trans[0]*1000
		pose_x = int(pose_x)
		pose_y = trans[1]*1000
		pose_y = int(pose_y)
        	print 'Torso X: ',pose_x ,"  Torso Y: ", pose_y
		twist = Twist()
		k = 2
		vel = 100
		if pose_x > 1000
			vel_left = -vel * ((1 - (600*2) / pose_y)
			vel_right = -vel * ((1 + (600*2) / pose_y)
		elif pose_x < 900:
			vel_left = -vel * ((1 - (600*2) / pose_y)
			vel_right = -vel * ((1 + (600*2) / pose_y)
		else:
			vel_right = 0
			vel_left = 0
		twist.linear.x = vel_left
		twist.linear.y = vel_right
		pub.publish(twist)
		rate.sleep()

         
 
if __name__ == '__main__':
	
	startFollow()
